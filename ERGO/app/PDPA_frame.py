import customtkinter as ctk
from tkinter import messagebox
import webbrowser
import os
import re
import subprocess
import sys

class PopupFrame(ctk.CTkToplevel):
    def __init__(self, parent):
        super().__init__(parent)
        self.title("PDPA")
        self.geometry("850x700")
        self.configure(fg_color="white")
        
        # ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏° X ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏° "‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò"
        self.protocol("WM_DELETE_WINDOW", self.open_login)
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏≠
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        window_width, window_height = 850, 700
        position_top = int(screen_height / 2 - window_height / 2)
        position_right = int(screen_width / 2 - window_width / 2)
        self.geometry(f'{window_width}x{window_height}+{position_right}+{position_top}')

        ctk.CTkLabel(self, text="‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á", font=("PTT 45 Pride", 22), fg_color="transparent").pack(pady=10)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Canvas ‡πÅ‡∏•‡∏∞ Scrollbar
        frame_canvas = ctk.CTkFrame(self, fg_color="white")
        frame_canvas.pack(pady=(10, 100), padx=3, fill="both", expand=True)

        canvas = ctk.CTkCanvas(frame_canvas, bg="white", highlightthickness=0)
        canvas.pack(side="left", fill="both", expand=True)

        scrollbar_canvas = ctk.CTkScrollbar(frame_canvas, orientation="vertical", command=canvas.yview)
        scrollbar_canvas = scrollbar_canvas = ctk.CTkScrollbar(frame_canvas, orientation="vertical", command=canvas.yview)
        scrollbar_canvas.pack(side="right", fill="y")
        canvas.configure(yscrollcommand=scrollbar_canvas.set)

        self.check_frame = ctk.CTkFrame(canvas, fg_color="white")
        canvas.create_window((0, 0), window=self.check_frame, anchor="nw", width=1000)
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå pdpa.txt
        pdpa_file_path = os.path.join(os.path.dirname(__file__), "text/pdpa.txt")
        try:
            with open(pdpa_file_path, "r", encoding="utf-8") as file:
                pdpa_content = file.read()

            check_texts = re.findall(r'(\d+\.\s.*?)(?=\n\d+\.|\Z)', pdpa_content, re.DOTALL)
        except FileNotFoundError:
            check_texts = ["‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ PDPA ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå pdpa.txt"]

        self.check_vars = []
        self.check_boxes = []

        for i, text in enumerate(check_texts):
            var = ctk.BooleanVar()
            self.check_vars.append(var)
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Frame ‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏á CheckBox ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏ä‡∏¥‡∏î‡∏Å‡∏±‡∏ô
            item_frame = ctk.CTkFrame(self.check_frame, fg_color="white")
            item_frame.grid(row=i, column=0, sticky="w", padx=5, pady=5)

            checkbox = ctk.CTkCheckBox(item_frame, variable=var, text="", fg_color="gray", hover_color="green")
            checkbox.pack(side="left", padx=(0, 5))

            label = ctk.CTkLabel(
                item_frame, 
                text=text, 
                fg_color="white", 
                justify="left", 
                wraplength=700,
                font=("PTT 45 Pride", 16)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° font ‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
            )

            label.pack(side="left")

        self.check_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))

        ctk.CTkButton(self, text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", command=self.select_all, fg_color="#2ea6f4").place(x=250, y=600)
        ctk.CTkButton(self, text="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", command=self.deselect_all, fg_color="#FF9800").place(x=400, y=600)
        ctk.CTkButton(self, text="‡∏ï‡∏Å‡∏•‡∏á", command=self.check_accepted, fg_color="#4CAF50").place(x=100, y=600)
        ctk.CTkButton(self, text="‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò", command=self.open_login, fg_color="#FF5959").place(x=550, y=600)

        link_label = ctk.CTkLabel(self, text="‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤",
                                  text_color="blue", cursor="hand2",
                                  fg_color="white")
        link_label.pack()
        link_label.bind("<Button-1>", lambda e: webbrowser.open("https://pttpdpa.pttplc.com/"))

        self.transient(parent)
        self.grab_set()

    def check_accepted(self):
        if all(var.get() for var in self.check_vars):
            self.destroy()
        else:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏Å‡∏•‡∏á")

    def select_all(self):
        for var, item_frame in zip(self.check_vars, self.check_frame.winfo_children()):
            var.set(True)
            checkbox = item_frame.winfo_children()[0]  # checkbox ‡πÄ‡∏õ‡πá‡∏ô widget ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á item_frame
            checkbox.configure(fg_color="green")

    def deselect_all(self):
        for var, item_frame in zip(self.check_vars, self.check_frame.winfo_children()):
            var.set(False)
            checkbox = item_frame.winfo_children()[0]
            checkbox.configure(fg_color="gray")

    
    def close_app(self):
        """ ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î Login ‡πÉ‡∏´‡∏°‡πà """
        print("üö™ close_app() ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏•‡πâ‡∏ß!")
        if self.master.winfo_exists():
            print("üõë ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å")
            self.master.quit()
            self.master.destroy()

        print("üîÑ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å open_login()")
        self.open_login()
    
    def open_login(self):
        """ ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Login ‡πÉ‡∏´‡∏°‡πà """
        try:
            # ‡∏´‡∏≤‡∏û‡∏≤‡∏ò‡∏Ç‡∏≠‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
            base_dir = os.path.dirname(os.path.abspath(__file__))

            # ‡∏ñ‡πâ‡∏≤‡∏û‡∏≤‡∏ò‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô **‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢** "app" ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° "app" ‡∏ã‡πâ‡∏≥
            if base_dir.endswith("app"):
                script_path = os.path.join(base_dir, "Login.py")
            else:
                script_path = os.path.join(base_dir, "app", "Login.py")  # ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå "app"

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Login.py ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if not os.path.exists(script_path):
                messagebox.showerror("Error", f"Cannot find Login.py at {script_path}")
                return

            # ‡πÄ‡∏õ‡∏¥‡∏î Login.py ‡πÉ‡∏´‡∏°‡πà
            python_executable = sys.executable  # ‡πÉ‡∏ä‡πâ Python ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà
            subprocess.Popen([python_executable, script_path], shell=True)

            # ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏Å‡πà‡∏≤
            sys.exit()
        except Exception as e:
            messagebox.showerror("Error", f"Failed to restart Login: {e}")
