import tkinter as tk
import customtkinter as ctk
from customtkinter import CTkImage
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk
import os
import io
import cv2
import requests 
from datetime import datetime 
import threading

params = {
    "x_api_key": "ergoapipoC18112024",  # ‡∏™‡πà‡∏á API Key ‡πÉ‡∏ô query parameter
}

class CommunityFrame(tk.Frame):
    def __init__(self, parent, user_email):
        super().__init__(parent)
        
        self.api_base_url = "http://127.0.0.1:8000"
        self.user_email = user_email
        self.user_id = self.fetch_user_id(user_email)
        self.like_labels = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡πâ‡∏≤‡∏¢ like ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏û‡∏™‡∏ï‡πå
        self.like_counts = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô like ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏û‡∏™‡∏ï‡πå
        self.icon_dir = os.path.join(os.path.dirname(__file__), "icon")
        if not os.path.exists(self.icon_dir):
            os.makedirs(self.icon_dir)
            
        self.profile_icon = self.load_resized_image("profile.png", (50, 50))  # ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        self.profile_images = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô

        # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        self.load_all_profiles()

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Canvas ‡πÅ‡∏•‡∏∞ Scrollbar
        self.canvas = tk.Canvas(self, bg="#ffffff", highlightthickness=0)
        self.scrollbar = tk.Scrollbar(self, orient="vertical", command=self.canvas.yview)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Frame ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô
        self.scrollable_frame = tk.Frame(self.canvas, bg="#ffffff")

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï scrollable_frame ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö canvas
        self.scrollable_frame.bind("<Configure>", lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all")))
        self.canvas.bind("<Configure>", lambda e: self.canvas.itemconfig(self.window_id, width=e.width))

        # ‡πÄ‡∏û‡∏¥‡πà‡∏° scrollable_frame ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô canvas
        self.window_id = self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô scrollbar
        self.canvas.configure(yscrollcommand=self.scrollbar.set)

        # ‚úÖ ‡πÉ‡∏ä‡πâ `grid()` ‡πÅ‡∏ó‡∏ô `pack()`
        self.canvas.grid(row=0, column=0, sticky="nsew")
        self.scrollbar.grid(row=0, column=1, sticky="ns")

        # ‚≠ê ‡∏™‡∏£‡πâ‡∏≤‡∏á Bottom Bar ‚≠ê
        self.bottom_bar = tk.Frame(self, bg="#FFFFFF", padx=10, pady=8)  
        self.bottom_bar.grid(row=1, column=0, columnspan=2, sticky="ew")

        # ‚úÖ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ Canvas ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≤‡∏° Frame ‡πÑ‡∏î‡πâ
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=1)

        # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
        self.camera_icon = self.load_resized_image("camera.png", (42, 39))
        self.folder_icon = self.load_resized_image("folder.png", (45, 47))
        self.send_icon = self.load_resized_image("send.png", (30, 30))
        self.profile_icon = self.load_resized_image("profile.png", (50, 50))

        # ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á
        self.camera_button = tk.Button(self.bottom_bar, image=self.camera_icon, command=self.open_camera, bd=0, bg="#FFFFFF", activebackground="#D4D4D4")
        self.camera_button.pack(side="left", padx=5, pady=5)

        # ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
        self.folder_button = tk.Button(self.bottom_bar, image=self.folder_icon, command=self.open_folder, bd=0, bg="#FFFFFF", activebackground="#D4D4D4")
        self.folder_button.pack(side="left", padx=5, pady=5)

        # ‚≠ê ‡∏™‡∏£‡πâ‡∏≤‡∏á Entry ‡πÅ‡∏ö‡∏ö‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° ‚≠ê
        self.placeholder_text = "‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"
        self.entry_frame = tk.Frame(self.bottom_bar, bg="#D9D9D9", bd=0)  # ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå
        self.entry_frame.pack(side="left", padx=(10, 10), pady=5, fill="x", expand=True)

        self.entry = tk.Entry(self.entry_frame, font=("PTT 45 Pride", 14), bd=0, fg="gray", bg="#D9D9D9")
        self.entry.pack(ipady=8, fill="x", padx=10, pady=2)  # ‡∏Ç‡∏≠‡∏ö‡∏°‡∏ô‡πÅ‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô

        self.add_placeholder()  # ‡πÅ‡∏™‡∏î‡∏á Placeholder ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

        # Bind Event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Focus In ‡πÅ‡∏•‡∏∞ Focus Out
        self.entry.bind("<FocusIn>", self.remove_placeholder)
        self.entry.bind("<FocusOut>", self.add_placeholder)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á
        self.send_button = tk.Button(self.bottom_bar, image=self.send_icon, command=self.send_message, bd=0, bg="#FFFFFF", activebackground="#D4D4D4")
        self.send_button.pack(side="right", padx=10, pady=5)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° refresh
        self.refresh_button = tk.Button(self, text="Refresh", font=("Arial", 12, "bold"), command=self.load_messages, bg="#4CAF50", fg="white")
        self.refresh_button.grid(row=0, column=0, padx=10, pady=10, sticky="ne")

        self.entry.bind("<Return>", lambda event: self.send_message())
        self.is_loading = False # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        self.load_messages()
        self.update_idletasks() # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        self.canvas.yview_moveto(1.0)  # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        
        response = requests.get("http://127.0.0.1:8000/users", params=params)
        if response.status_code == 200:
            try:
                data = response.json()

                # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å API
                # print("Users list from API:", data)

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ 'users' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô list
                users_list = data.get('users', [])
                if isinstance(users_list, list):
                    # üîπ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user ‡∏ï‡∏≤‡∏° email
                    user_data = next((user for user in users_list if user.get("email") == self.user_email), None)

                    if user_data:
                        self.username = user_data.get("username", "Unknown User")
                    else:
                        self.username = "Unknown User"

                    print(f"üîπ Username: {self.username}")
                else:
                    print("‚ö†Ô∏è Error: 'users' is not a list!")
                    self.username = "Unknown User"
            except ValueError as e:
                print(f"‚ö†Ô∏è Error: Failed to parse response as JSON - {e}")
                self.username = "Unknown User"
        else:
            print(f"‚ö†Ô∏è API Error: {response.status_code}")
            self.username = "Unknown User"

    def add_placeholder(self, event=None):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° '‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°' ‡∏ñ‡πâ‡∏≤ input ‡∏ß‡πà‡∏≤‡∏á"""
        if not self.entry.get():
            self.entry.insert(0, self.placeholder_text)
            self.entry.config(fg="gray")

    def remove_placeholder(self, event=None):
        """‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° placeholder ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå"""
        if self.entry.get() == self.placeholder_text:
            self.entry.delete(0, "end")
            self.entry.config(fg="black")  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏î‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå

    def load_resized_image(self, file_name, size):
        try:
            path = os.path.join(self.icon_dir, file_name)
            image = Image.open(path)
            image = image.resize(size, Image.Resampling.LANCZOS)
            return ImageTk.PhotoImage(image)
        except Exception as e:
            print(f"Error loading {file_name}: {e}")
            return None
        
    def show_confirm_popup(self, title, message, ok_callback, cancel_callback):
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Toplevel window ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö popup
        popup = tk.Toplevel(self)
        popup.title(title)
        popup.geometry("350x150")  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î popup
        popup.resizable(False, False)
        popup.configure(bg="white")
        # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ popup ‡πÄ‡∏õ‡πá‡∏ô modal (‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà window ‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ)
        popup.grab_set()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Label ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô popup
        label = tk.Label(popup, text=message, font=("PTT 45 Pride", 12), bg="white")
        label.pack(pady=20)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°
        btn_frame = tk.Frame(popup, bg="white")
        btn_frame.pack(pady=10)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° "‡∏ï‡∏Å‡∏•‡∏á" ‡πÅ‡∏•‡∏∞ "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        ok_button = tk.Button(
            btn_frame, text="‡∏ï‡∏Å‡∏•‡∏á", font=("PTT 45 Pride", 12, "bold"),
            bg="#4CAF50", fg="white", width=10,
            command=lambda: [ok_callback(), popup.destroy()]
        )
        ok_button.pack(side="left", padx=10)
        
        cancel_button = tk.Button(
            btn_frame, text="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", font=("PTT 45 Pride", 12, "bold"),
            bg="#f44336", fg="white", width=10,
            command=lambda: [cancel_callback(), popup.destroy()]
        )
        cancel_button.pack(side="left", padx=10)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ popup ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ parent
        self.update_idletasks()
        x = self.winfo_x() + (self.winfo_width() // 2) - (350 // 2) + 200
        y = self.winfo_y() + (self.winfo_height() // 2) - (150 // 2)
        popup.geometry(f"+{x}+{y}")
        
    def fetch_profile_images(self):
        """ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏à‡∏≤‡∏Å API """
        url = f"{self.api_base_url}/get_all_profiles/"
        try:
            response = requests.get(url, params=params)
            if response.status_code == 200:
                data = response.json()
                self.profile_images = data.get("profiles", {})
            else:
                print(f"‚ö†Ô∏è Failed to fetch profile images: {response.status_code}")
                self.profile_images = {}
        except Exception as e:
            print(f"‚ùå Error fetching profile images: {e}")
            self.profile_images = {}
    
    def load_all_profiles(self):
        """ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å user ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ """
        try:
            response = requests.get(f"{self.api_base_url}/users", params=params)
            if response.status_code == 200:
                users = response.json().get("users", [])
                for user in users:
                    user_id = user.get("user_id")
                    profile_url = user.get("profile_url", None)

                    if user_id:
                        if profile_url and profile_url.strip() and profile_url.lower() != "null":
                            self.profile_images[user_id] = self.load_profile_image(profile_url)  # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á
                        else:
                            self.profile_images[user_id] = self.profile_icon  # ‚úÖ ‡πÉ‡∏ä‡πâ Default
            else:
                print("‚ö†Ô∏è API Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ")
        except Exception as e:
            print(f"‚ùå Error loading user profiles: {e}")

    def load_profile_image(self, image_url):
        """ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å URL """
        try:
            if not image_url or image_url.strip() == "" or image_url.lower() == "null":
                return self.profile_icon  # ‡πÉ‡∏ä‡πâ Default ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ URL

            response = requests.get(image_url, params=params, timeout=5)
            if response.status_code == 200:
                image_data = io.BytesIO(response.content)
                image = Image.open(image_data)
                image = image.resize((50, 50), Image.Resampling.LANCZOS)
                return ImageTk.PhotoImage(image)
            else:
                print(f"‚ö†Ô∏è ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏≤‡∏Å {image_url}")
        except Exception as e:
            print(f"‚ùå Error loading profile image: {e}")

        return self.profile_icon  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        
    def load_messages(self):
        if self.is_loading:
            return  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ã‡πâ‡∏≥

        self.is_loading = True  # ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...
        
        def fetch():
            try:
                for widget in self.scrollable_frame.winfo_children():
                    try:
                        widget.unbind("<Button-1>")  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤ event ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏´‡∏•‡∏±‡∏á destroy
                    except Exception as e:
                        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ unbind widget ‡πÑ‡∏î‡πâ: {e}")  
                    
                    widget.destroy()

                response = requests.get("http://localhost:8000/get-messages", params)
                if response.status_code == 200:
                    messages = response.json().get("messages", [])
                    user_id = self.user_id

                    messages = sorted(messages, key=lambda x: x["post_id"])

                    for msg in messages:
                        username = msg.get("username", "Unknown")
                        post_id = msg.get("post_id")
                        content = msg.get("content")
                        message_owner_id = msg.get("user_id")
                        filepath = msg.get("video_path", None)  
                        like_count = msg.get("like_count", 0)  
                        profile_image = self.profile_images.get(message_owner_id, self.profile_icon)

                        is_liked_response = requests.get(f"http://localhost:8000/check-like", params={"post_id": post_id, "user_id": user_id, "x_api_key": "ergoapipoC18112024"})
                        is_liked = is_liked_response.json().get("is_liked", False) if is_liked_response.status_code == 200 else False

                        if filepath:  
                            if message_owner_id == user_id:
                                self.post_video(filepath, user_id, post_id, username, like_count, is_liked, profile_image)
                            else:
                                self.post_video_another(filepath, user_id, post_id, username, like_count, is_liked, profile_image)
                        else:  
                            if message_owner_id == user_id:
                                self.add_message_bubble(post_id, username, content, profile_image)
                            else:
                                self.add_message_bubble_another(post_id, username, content, profile_image)

                    self.update_idletasks()
                    self.canvas.yview_moveto(1.0)
                else:
                    print("‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", response.json())
            except Exception as e:
                print("‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:", e)
            finally:
                self.is_loading = False  # ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
            
        thread = threading.Thread(target=fetch, daemon=True)
        thread.start()

                    
    def fetch_user_id(self, user_email):
        """‡∏î‡∏∂‡∏á user_id ‡∏à‡∏≤‡∏Å API"""
        url = f"{self.api_base_url}/get_user_id/{user_email}"
        try:
            response = requests.get(url, params)
            if response.status_code == 200:
                data = response.json()
                if "user_id" in data:
                    return data["user_id"]
            print("Error fetching user_id:", response.json().get("error", "Unknown error"))
        except Exception as e:
            print("Exception:", e)
        return None  # ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏´‡πâ return None
            
    def cancel_single_message(self, bubble_frame, post_id):
        """ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å (‡∏•‡∏ö) ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏≤‡∏Å Storage ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ """

        def on_ok():
            try:
                # ‚úÖ 1. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÉ‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                video_response = requests.get(
                    f"http://localhost:8000/get_video_path",
                    params={"post_id": post_id, "x_api_key": "ergoapipoC18112024"}        
                )

                if video_response.status_code == 200:
                    video_path = video_response.json().get("video_path")
                    if video_path:
                        # ‚úÖ 2. ‡∏•‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Storage
                        delete_video_response = requests.delete(
                            f"http://localhost:8000/delete_video",
                            params={"post_id": post_id, "video_url": video_path, "x_api_key": "ergoapipoC18112024"}  # ‡∏™‡πà‡∏á post_id ‡πÅ‡∏•‡∏∞ video_url ‡πÉ‡∏ô query string
                        )

                        if delete_video_response.status_code == 200:
                            print(f"‚úÖ ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Storage: {video_path}")
                        else:
                            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏î‡πâ: {delete_video_response.json()}")

                # ‚úÖ 3. ‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                response = requests.delete(
                    f"http://localhost:8000/delete-message/{post_id}",
                    params=params,
                    json={"user_id": self.user_id},
                )

                if response.status_code == 200:
                    print("‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                    bubble_frame.destroy()  # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
                else:
                    print("‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå:", response.json())

            except Exception as e:
                print("‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", e)

        def on_cancel():
            print("‚õî ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")

        # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á popup ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö
        self.show_confirm_popup("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö", "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", on_ok, on_cancel)
        
    def send_message(self):
        message = self.entry.get().strip()
        if message and message != self.placeholder_text:
            # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
            self.entry.delete(0, "end")
            self.add_placeholder()
            self.canvas.update_idletasks()
            self.canvas.yview_moveto(1)

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ API
            print(f"Sending user_id: {self.user_id}, content: {message}")

            try:
                create_at = datetime.now().isoformat()
                response = requests.post(
                    "http://localhost:8000/post-message",
                    params={
                        "user_id": self.user_id,
                        "content": message,
                        "create_at": create_at,
                        "x_api_key": "ergoapipoC18112024"
                    }
                )

                if response.status_code == 200:
                    data = response.json()
                    post_id = data.get("post_id")
                    if post_id:
                        print("‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! post_id:", post_id)
                        # ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å add_message_bubble ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á post_id ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ
                        self.add_message_bubble(post_id, self.username, message, self.profile_icon)
                        self.update_idletasks() # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                        self.canvas.yview_moveto(1.0)  # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                    else:
                        print("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á post_id ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö")
                else:
                    print("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", response.json())
                        
            except Exception as e:
                print("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", e)


    def add_message_bubble(self, post_id, username, message, profile_image):
        bubble_frame = ctk.CTkFrame(self.scrollable_frame, fg_color="white", corner_radius=20)
        bubble_frame.pack(anchor="e", fill="x", padx=5, pady=5)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
        profile_label = tk.Label(bubble_frame, image=profile_image, bg="white")
        profile_image.image = profile_image  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô GC
        profile_label.pack(side="right", padx=5)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        text_bubble = ctk.CTkLabel(
            bubble_frame,
            text=message,
            font=("PTT 45 Pride", 18),
            fg_color="#a3d977",  # ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            text_color="black",  # ‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
            corner_radius=20,
            wraplength=600,
            padx=10,
            pady=5,
        )
        text_bubble.pack(side="right", padx=5)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        username_label = ctk.CTkLabel(
            bubble_frame,
            text=username,
            font=("PTT 45 Pride", 14, "italic"),
            text_color="gray",
            fg_color="white",
        )
        username_label.pack(anchor="e", padx=5)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
        cancel_button = ctk.CTkButton(
            bubble_frame, 
            text="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á", 
            fg_color="white", 
            text_color="red",
            hover_color="#f5c6cb",  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡πâ‡πÄ‡∏°‡∏≤‡∏™‡πå
            font=("PTT 45 Pride", 14), 
            command=lambda: self.cancel_single_message(bubble_frame, post_id)
        )
        cancel_button.pack(side="bottom", pady=5, anchor="e")


    def add_message_bubble_another(self, post_id, username, message, profile_image):
        bubble_frame = ctk.CTkFrame(self.scrollable_frame, fg_color="white", corner_radius=15)
        bubble_frame.pack(anchor="w", fill="x", padx=5, pady=5)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
        profile_label = tk.Label(bubble_frame, image=profile_image, bg="white")
        profile_image.image = profile_image  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô GC
        profile_label.pack(side="left", padx=5)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        text_bubble = ctk.CTkLabel(
            bubble_frame,
            text=message,
            font=("PTT 45 Pride", 18),
            fg_color="#d0f0ff",  # ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô
            text_color="black",
            corner_radius=20,
            wraplength=600,
            padx=10,
            pady=5,
        )
        text_bubble.pack(side="left", padx=5)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        username_label = ctk.CTkLabel(
            bubble_frame,
            text=username,
            font=("PTT 45 Pride", 14, "italic"),
            text_color="gray",
            fg_color="white",
        )
        username_label.pack(anchor="w", padx=5)


        
    def post_video(self, filepath, user_id, post_id, username, like_count, is_liked, profile_image):
        try:
            print(f"‡πÉ‡∏ä‡πâ post_id: {post_id} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠")

            bubble_frame = tk.Frame(self.scrollable_frame, bg="white", pady=5, padx=10)
            profile_label = tk.Label(bubble_frame, image=profile_image, bg="white")
            profile_label.image = profile_image  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô GC
            profile_label.pack(side="right", padx=5)

            thumbnail = self.get_video_thumbnail(filepath)
            if thumbnail:
                video_label = tk.Label(bubble_frame, image=thumbnail, bg="white", cursor="hand2")
                video_label.image = thumbnail
                video_label.pack(side="right", padx=5)
                video_label.bind("<Button-1>", lambda e: self.play_video(filepath))
            else:
                tk.Label(bubble_frame, text="‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏î‡πâ", font=("PTT 45 Pride", 12), bg="white").pack(side="left", padx=5)

            username_label = tk.Label(bubble_frame, text=username, font=("PTT 45 Pride", 10, "italic"), fg="gray", bg="white")
            username_label.pack(anchor="e", padx=5)

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Like Frame
            like_frame = tk.Frame(bubble_frame, bg="white")
            like_frame.pack(side="right", anchor="e", pady=5)

            like_icon = self.load_resized_image("Like.png", (20, 20))
            heart_icon = self.load_resized_image("heart.png", (20, 20))

            initial_icon = heart_icon if is_liked else like_icon

            like_button = tk.Button(like_frame, image=initial_icon, bd=0, bg="white")
            like_button.image = initial_icon  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô GC
            like_button.heart_icon = heart_icon
            like_button.like_icon = like_icon
            like_button.is_liked = is_liked  
            like_button.like_count = like_count

            like_label = tk.Label(like_frame, text=f"{like_count} Likes", font=("PTT 45 Pride", 12), bg="white")

            # ‡πÉ‡∏ä‡πâ try-except ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å widget ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
            try:
                like_button.config(command=lambda: self.toggle_like(like_button, like_label, post_id, user_id, like_button.is_liked))
                like_button.pack(side="top", pady=2)
                like_label.pack(side="top")
            except tk.TclError:
                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Like button ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö post_id {post_id}")

            self.like_labels[post_id] = like_label

            self.add_like_count(post_id, like_count)

            cancel_button = tk.Button(
                bubble_frame, 
                text="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á", 
                fg="red", 
                font=("PTT 45 Pride", 12), 
                bd=0, 
                bg="white", 
                command=lambda: self.cancel_single_message(bubble_frame, post_id)
            )
            cancel_button.pack(side="bottom", pady=5, anchor="e")

            bubble_frame.pack(anchor="w", fill="x", padx=5, pady=5)
            self.canvas.update_idletasks()
            self.canvas.yview_moveto(1)

        except Exception as e:
            messagebox.showerror("Error", f"Error posting video: {e}")


    def post_video_another(self, filepath, user_id, post_id, username, like_count, is_liked ,profile_image):
        try:
            print(f"üìå ‡πÉ‡∏ä‡πâ post_id: {post_id} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏∑‡πà‡∏ô")

            bubble_frame = tk.Frame(self.scrollable_frame, bg="#ffffff", pady=5, padx=10)
            
            profile_label = tk.Label(bubble_frame, image=profile_image, bg="#ffffff")
            profile_label.image = profile_image  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô GC
            profile_label.pack(side="left", padx=5)

            thumbnail = self.get_video_thumbnail(filepath)
            if thumbnail:
                video_label = tk.Label(bubble_frame, image=thumbnail, bg="#ffffff", cursor="hand2")
                video_label.image = thumbnail
                video_label.pack(side="left", padx=5)
                video_label.bind("<Button-1>", lambda e: self.play_video(filepath))
            else:
                tk.Label(bubble_frame, text="‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏î‡πâ", font=("PTT 45 Pride", 12), bg="lightgray").pack(side="left", padx=5)

            username_label = tk.Label(bubble_frame, text=username, font=("PTT 45 Pride", 10, "italic"), fg="gray", bg="#ffffff")
            username_label.pack(anchor="w", padx=5)

            # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Like Frame ‡πÅ‡∏•‡∏∞ Like Button
            like_frame = tk.Frame(bubble_frame, bg="#ffffff")
            like_frame.pack(expand=True, anchor="w", pady=5)

            like_icon = self.load_resized_image("Like.png", (20, 20))
            heart_icon = self.load_resized_image("heart.png", (20, 20))
            
            initial_icon = heart_icon if is_liked else like_icon

            like_button = tk.Button(like_frame, image=initial_icon, bd=0, bg="white")
            like_button.image = initial_icon  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô GC
            like_button.heart_icon = heart_icon
            like_button.like_icon = like_icon
            like_button.is_liked = is_liked  
            like_button.like_count = like_count

            like_label = tk.Label(like_frame, text=f"{like_count} Likes", font=("PTT 45 Pride", 12), bg="white")

            # ‡πÉ‡∏ä‡πâ try-except ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å widget ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
            try:
                like_button.config(command=lambda: self.toggle_like(like_button, like_label, post_id, user_id, like_button.is_liked))
                like_button.pack(side="top", pady=2)
                like_label.pack(side="top")
            except tk.TclError:
                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Like button ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö post_id {post_id}")

            # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å like_label ‡∏•‡∏á self.like_labels
            self.like_labels[post_id] = like_label

            # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏•‡∏Å‡πå
            self.add_like_count(post_id, like_count)

            bubble_frame.pack(anchor="w", fill="x", padx=5, pady=5)
            self.canvas.update_idletasks()
            self.canvas.yview_moveto(1)

        except Exception as e:
            messagebox.showerror("Error", f"‚ùå Error posting video by another user: {e}")


    def toggle_like(self, like_button, like_label, post_id, user_id, is_liked):
        """ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° Like ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Like ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á FastAPI """

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        if not like_button.winfo_exists() or not like_label.winfo_exists():
            print(f"‚ö†Ô∏è ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠ Label ‡∏Ç‡∏≠‡∏á post_id {post_id} ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß")
            return

        if is_liked:
            # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Like
            like_button.config(image=like_button.like_icon, bg="white")
            like_button.like_count -= 1
            like_button.is_liked = False
            action = "unlike"
        else:
            # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà Like
            like_button.config(image=like_button.heart_icon, bg="white")
            like_button.like_count += 1
            like_button.is_liked = True
            action = "like"

        # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
        self.send_like(post_id, user_id, action)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ label ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        if like_label.winfo_exists():
            like_label.config(text=f"{like_button.like_count} Likes")

    def send_like(self, post_id, user_id, action):
        """ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠ Like ‡∏´‡∏£‡∏∑‡∏≠ Unlike ‡πÑ‡∏õ‡∏¢‡∏±‡∏á API """
        url = "http://127.0.0.1:8000/like"
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á dictionary ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        params = {
            "post_id": post_id,
            "user_id": user_id,
            "action": action,  # ‡πÉ‡∏ä‡πâ action ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£ Like ‡∏´‡∏£‡∏∑‡∏≠ 
            "x_api_key": "ergoapipoC18112024"
        }

        try:
            response = requests.post(url, params=params)

            if response.status_code == 200:
                print(f"{action.capitalize()} added successfully")
            else:
                print(f"Error: {response.status_code}, {response.json()['detail']}")
        except requests.exceptions.RequestException as e:
            print(f"Error sending request: {e}")
            
    def add_like_count(self, post_id, like_count):
        """ ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Like ‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå """
        try:
            if post_id in self.like_labels:
                like_count_label = self.like_labels[post_id]
                like_count_label.config(text=f"{like_count} Likes")
            else:
                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö like_label ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö post_id: {post_id}")
        except Exception as e:
            print(f"‚ùå Error in add_like_count: {e}")


    def get_video_thumbnail(self, filepath):
        try:
            cap = cv2.VideoCapture(filepath)
            if not cap.isOpened():
                print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠: {filepath}")
                return None

            ret, frame = cap.read()
            cap.release()

            if ret:
                frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                image = Image.fromarray(frame)
                image = image.resize((150, 150), Image.Resampling.LANCZOS)
                return ImageTk.PhotoImage(image)
            else:
                print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠: {filepath}")
                return None
        except Exception as e:
            print(f"Error generating video thumbnail: {e}")
            return None

    def play_video(self, filepath):
        try:
            os.startfile(filepath)
        except Exception as e:
            messagebox.showerror("Error", f"Error playing video: {e}")
            
    def open_camera(self):
        try:
            video_path = os.path.join(self.icon_dir, "recorded_video.avi")
            cap = cv2.VideoCapture(0)
            if not cap.isOpened():
                messagebox.showerror("Error", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
                return

            fourcc = cv2.VideoWriter_fourcc(*'XVID')
            out = cv2.VideoWriter(video_path, fourcc, 20.0, (640, 480))

            cv2.namedWindow("Camera")
            print("‡∏Å‡∏î 'r' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠, 's' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å, 'q' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å")
            is_recording = False

            while True:
                ret, frame = cap.read()
                if not ret:
                    print("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
                    break

                cv2.imshow("Camera", frame)

                if is_recording:
                    print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ü‡∏£‡∏°...")
                    out.write(frame)

                key = cv2.waitKey(1) & 0xFF
                if key == ord('r'):
                    is_recording = not is_recording
                    print("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠" if is_recording else "‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠")
                elif key == ord('s'):
                    if not is_recording:
                        print("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠")
                        messagebox.showinfo("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà {video_path}")
                    else:
                        print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
                elif key == ord('q'):
                    break

            cap.release()
            out.release()
            cv2.destroyAllWindows()
            cv2.waitKey(1)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå

        except Exception as e:
            messagebox.showerror("Error", f"Error opening camera: {e}")

    def open_folder(self):
        filepath = filedialog.askopenfilename(filetypes=[("Image files", "*.jpg *.png"), ("Video files", "*.mp4 *.avi *.mkv")])
        if filepath:
            # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö `post_id`
            upload_url = "http://localhost:8000/upload_file/"
            with open(filepath, "rb") as file:
                files = {"file": file}
                params = {"user_id": self.user_id, "x_api_key": "ergoapipoC18112024"}
                upload_response = requests.post(upload_url, files=files, params=params)

            if upload_response.status_code == 200:
                response_data = upload_response.json()
                post_id = response_data.get("post_id")
                if post_id is not None:
                    print(f"‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö post_id: {post_id}")
                    self.post_media(filepath, post_id)  # ‚úÖ ‡∏™‡πà‡∏á post_id ‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ post_media
                else:
                    messagebox.showerror("Error", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á post_id ‡πÑ‡∏î‡πâ")
            else:
                messagebox.showerror("Error", "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")


    def post_media(self, filepath, post_id):
        username = self.username  # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ username ‡∏à‡∏≤‡∏Å instance variable
        if filepath.lower().endswith(('mp4', 'avi', 'mkv')):
            like_count = 0  # ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ like_count ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            self.post_video(filepath, self.user_id, post_id, username, like_count, is_liked=False, profile_image=self.profile_icon)
        else:
            self.post_image(filepath)


    def post_image(self, filepath):
        try:
            # ‚úÖ 1. ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Blob Storage ‡∏Å‡πà‡∏≠‡∏ô
            container_name = "ergo"  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠ Container ‡∏à‡∏£‡∏¥‡∏á
            check_blob_url = f"http://localhost:8000/check_blob_storage/?container_name={container_name}"
            response = requests.get(check_blob_url, params)

            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Blob Storage ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {data['message']}")
            else:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Blob Storage ‡πÑ‡∏î‡πâ")
                messagebox.showerror("Error", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Blob Storage ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                return

            # ‚úÖ 2. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á Azure Blob Storage
            upload_url = "http://localhost:8000/upload_video/"
            with open(filepath, "rb") as file:
                files = {"file": file}
                upload_response = requests.post(upload_url, params, files=files)

            if upload_response.status_code == 200:
                image_url = upload_response.json().get("image_url")
                print(f"‚úÖ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Azure Blob Storage: {image_url}")
            else:
                print(f"‚ùå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {upload_response.json()}")
                messagebox.showerror("Error", "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á Blob Storage ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                return

            # ‚úÖ 3. ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å URL ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Local Path
            image_data = requests.get(image_url, params).content
            image = Image.open(io.BytesIO(image_data))
            image = image.resize((150, 150))
            image_tk = ImageTk.PhotoImage(image)

            # ‚úÖ 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
            bubble_frame = tk.Frame(self.scrollable_frame, bg="white", pady=5, padx=10)
            profile_label = tk.Label(bubble_frame, image=self.profile_icon, bg="white")
            profile_label.pack(side="left", padx=5)

            image_label = tk.Label(bubble_frame, image=image_tk, bg="white")
            image_label.image = image_tk
            image_label.pack(side="left", padx=5)

            username_label = tk.Label(bubble_frame, text=self.username, font=("PTT 45 Pride", 10, "italic"), fg="gray", bg="white")
            username_label.pack(anchor="w", padx=5)

            # ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
            cancel_button = tk.Button(bubble_frame, text="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á", fg="red", font=("PTT 45 Pride", 12), bd=0, bg="white", command=lambda: self.cancel_single_message(bubble_frame))
            cancel_button.pack(side="bottom", pady=5, anchor="center")

            bubble_frame.pack(anchor="w", fill="x", padx=5, pady=5)

            self.canvas.update_idletasks()
            self.canvas.yview_moveto(1)

        except Exception as e:
            messagebox.showerror("Error", f"Error posting image: {e}")


if __name__ == "__main__":
    root = tk.Tk()
    root.title("Community Chat")
    root.geometry("824x768")
    frame = CommunityFrame(root)
    frame.grid(row=0, column=0, sticky="nsew")

    root.mainloop()