import tkinter as tk
from tkinter import filedialog, messagebox, simpledialog
from PIL import Image, ImageTk
import os
import io
import requests
import webbrowser
import subprocess  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ subprocess
import threading

class ProfileFrame(tk.Frame):
    def __init__(self, parent, user_email, app_instance):
        super().__init__(parent, bg="white")
        self.user_email = user_email
        self.api_base_url = "http://127.0.0.1:8000"
        self.user_id = self.fetch_user_id(user_email)  # ‡∏î‡∏∂‡∏á user_id ‡∏à‡∏≤‡∏Å API
        self.app_instance = app_instance
        self.logout_called = False  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Logout ‡∏ã‡πâ‡∏≥
        self.timer_stopped = False  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô stop_timer() ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ã‡πâ‡∏≥

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏î‡πÄ‡∏£‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
        self.icon_dir = os.path.join(os.path.dirname(__file__), "icon")
        self.default_profile_path = os.path.join(self.icon_dir, "profile.png")

        # ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        self.profile_image = None
        if self.user_id:
            self.load_profile_image(self.user_id)
        else:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö user_id, ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ó‡∏ô")
            self.load_profile_image(self.default_profile_path)  

        # Canvas ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
        self.canvas = tk.Canvas(self, width=100, height=100, bg="#ffffff", highlightthickness=0)
        self.profile_pic = self.canvas.create_image(50, 50, image=self.profile_image, tags="profile_pic")
        self.canvas.place(relx=0.4, rely=0.2, anchor="center")
        self.canvas.tag_bind("profile_pic", "<Button-1>", self.change_profile_picture)

        
        # üîπ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ users ‡∏à‡∏≤‡∏Å API
        response = requests.get("http://127.0.0.1:8000/users")
        if response.status_code == 200:
            try:
                data = response.json()

                # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å API
                # print("Users list from API:", data)

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ 'users' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô list
                users_list = data.get('users', [])
                if isinstance(users_list, list):
                    # üîπ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user ‡∏ï‡∏≤‡∏° email
                    user_data = next((user for user in users_list if user.get("email") == self.user_email), None)

                    if user_data:
                        self.username = user_data.get("username", "Unknown User")
                    else:
                        self.username = "Unknown User"

                    print(f"üîπ Username: {self.username}")
                else:
                    print("‚ö†Ô∏è Error: 'users' is not a list!")
                    self.username = "Unknown User"
            except ValueError as e:
                print(f"‚ö†Ô∏è Error: Failed to parse response as JSON - {e}")
                self.username = "Unknown User"
        else:
            print(f"‚ö†Ô∏è API Error: {response.status_code}")
            self.username = "Unknown User"

        # ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        self.name_label = tk.Label(self, text=self.username, font=("Arial", 16), bg="white", cursor="hand2")
        self.name_label.place(relx=0.4, rely=0.35, anchor="center")
        self.name_label.bind("<Button-1>", self.change_name)  # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠

        # ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
        self.logout_button = tk.Button(self, text="Logout", font=("Arial", 12), bg="#ff0000", fg="white",
                                       borderwidth=0, command=self.logout)
        self.logout_button.place(relx=0.8, rely=0.05, anchor="ne")

    
    def load_profile_image(self, user_id):
        def fetch():
            """ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å URL ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default """
            try:
                response = requests.get(f"http://localhost:8000/get_profile_image/?user_id={user_id}")
                profile_url = response.json().get("profile_url") if response.status_code == 200 else None
                
                if profile_url:
                    image_response = requests.get(profile_url)
                    if image_response.status_code == 200:
                        image_data = image_response.content
                        image = Image.open(io.BytesIO(image_data))
                    else:
                        print(f"‚ö†Ô∏è ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô Storage: {profile_url}")
                        profile_url = None  
                else:
                    print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ URL ‡∏£‡∏π‡∏õ‡πÉ‡∏ô Database")

                if not profile_url:
                    image_path = self.default_profile_path
                    if not os.path.exists(image_path):
                        raise FileNotFoundError("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
                    image = Image.open(image_path)

                image = image.resize((100, 100), Image.Resampling.LANCZOS)
                profile_image = ImageTk.PhotoImage(image)

                # ‚úÖ ‡πÉ‡∏ä‡πâ Tkinter `after()` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÉ‡∏ô main thread
                self.after(0, lambda: self.update_profile_image(profile_image))

            except Exception as e:
                print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û: {e}")
                self.after(0, lambda: messagebox.showerror("Error", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ"))

        thread = threading.Thread(target=fetch, daemon=True)
        thread.start()

    def update_profile_image(self, profile_image):
        """ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô UI (Main Thread) """
        self.profile_image = profile_image
        self.canvas.itemconfig(self.profile_pic, image=self.profile_image)

    def change_profile_picture(self, event=None):
        """ ‡πÉ‡∏ä‡πâ threading ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô background thread """
        
        def upload_profile_picture():
            """ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏ô thread ‡πÅ‡∏¢‡∏Å """
            if self.user_id is None:
                messagebox.showerror("Error", "‡πÑ‡∏°‡πà‡∏û‡∏ö user_id ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
                return

            file_path = filedialog.askopenfilename(
                title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå",
                filetypes=[("Image Files", "*.png;*.jpg;*.jpeg;*.gif;*.bmp")]
            )

            if not file_path:
                return  # ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πà‡∏≠

            try:
                # ‚úÖ 1. ‡∏î‡∏∂‡∏á URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å API
                response = requests.get(f"http://localhost:8000/get_profile_image/", params={"user_id": self.user_id})
                profile_url = response.json().get("profile_url") if response.status_code == 200 else None

                # ‚úÖ 2. ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                if profile_url:
                    delete_response = requests.delete(
                        "http://localhost:8000/delete_old_profile/",
                        params={"user_id": self.user_id, "profile_url": profile_url}
                    )
                    print(delete_response.json().get("message"))

                # ‚úÖ 3. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á Azure Blob Storage
                upload_url = f"http://localhost:8000/upload_profile/?user_id={self.user_id}"
                with open(file_path, "rb") as file:
                    files = {"file": file}
                    upload_response = requests.post(upload_url, files=files)

                if upload_response.status_code == 200:
                    new_profile_url = upload_response.json().get("profile_url", None)
                    if not new_profile_url:
                        self.after(0, lambda: messagebox.showerror("Error", "‡πÑ‡∏°‡πà‡∏û‡∏ö URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà"))
                        return
                    print(f"‚úÖ ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Azure Blob Storage: {new_profile_url}")
                else:
                    self.after(0, lambda: messagebox.showerror("Error", "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"))
                    return

                # ‚úÖ 4. ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
                image_data = requests.get(new_profile_url).content
                image = Image.open(io.BytesIO(image_data))
                image = image.resize((100, 100), Image.Resampling.LANCZOS)
                new_profile_image = ImageTk.PhotoImage(image)

                # ‚úÖ ‡πÉ‡∏ä‡πâ `after()` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ UI ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô main thread
                self.after(0, lambda: self.update_profile_image(new_profile_image))

            except Exception as e:
                self.after(0, lambda: messagebox.showerror("Error", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {e}"))

        # ‚úÖ ‡∏£‡∏±‡∏ô `upload_profile_picture()` ‡πÉ‡∏ô background thread
        thread = threading.Thread(target=upload_profile_picture, daemon=True)
        thread.start()

    def update_profile_image(self, new_profile_image):
        """ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏à‡∏≤‡∏Å main thread """
        self.profile_image = new_profile_image
        self.canvas.itemconfig(self.profile_pic, image=self.profile_image)
        print("‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

    def fetch_user_id(self, user_email):
        """‡∏î‡∏∂‡∏á user_id ‡∏à‡∏≤‡∏Å API"""
        url = f"{self.api_base_url}/get_user_id/{user_email}"
        try:
            response = requests.get(url, timeout=5)  # ‡πÉ‡∏™‡πà timeout ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á
            if response.status_code == 200:
                data = response.json()
                return data.get("user_id")
            else:
                print("Error fetching user_id:", response.json().get("error", "Unknown error"))
        except requests.RequestException as e:
            print("Exception:", e)

        return None  # ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏´‡πâ return None ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô

    def change_name(self, event=None):
        """‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô API"""
        new_name = simpledialog.askstring("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà:", initialvalue=self.username)
        
        if new_name and new_name.strip():
            user_id = self.fetch_user_id(self.user_email)  # ‡∏î‡∏∂‡∏á user_id
            if user_id:
                success = self.update_username_in_api(user_id, new_name.strip())  # ‡∏™‡πà‡∏á user_id ‡πÅ‡∏ó‡∏ô email
                if success:
                    self.username = new_name.strip()
                    if self.name_label:
                        self.name_label.config(text=self.username)
                    messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô '{self.username}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
                else:
                    messagebox.showerror("‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
            else:
                messagebox.showerror("‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á user_id ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")

    def update_username_in_api(self, user_id, new_username):
        """‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á API"""
        url = "http://127.0.0.1:8000/update_username"  # ‡πÉ‡∏ä‡πâ endpoint POST ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        payload = {"user_id": user_id, "new_username": new_username}
        headers = {'Content-Type': 'application/x-www-form-urlencoded'}

        try:
            response = requests.post(url, data=payload, headers=headers, timeout=5)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° headers
            if response.status_code == 200:
                return True
            elif response.status_code == 404:
                messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
            elif response.status_code == 400:
                messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", response.json().get("detail", "‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ"))
            else:
                messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {response.status_code}\n{response.text}")
        except requests.RequestException as e:
            messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: {e}")

        return False  # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ return False

    def logout(self):
        """ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Logout ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ stop_timer() ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô """
        print("üîπ logout() ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å!")  

        if self.logout_called:
            print("‚ö†Ô∏è logout() ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥! ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å")
            return
        self.logout_called = True  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏î Logout ‡∏ã‡πâ‡∏≥

        print("üì¢ ‡πÅ‡∏™‡∏î‡∏á Messagebox ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Logout...")
        confirmed = messagebox.askyesno("Logout", "Are you sure you want to log out?")

        if not confirmed:
            print("‚ùå ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Logout")
            self.logout_called = False  # Reset ‡∏Ñ‡πà‡∏≤ ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            return
        print("‚úÖ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Logout")

        # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å stop_timer() ‡∏Å‡πà‡∏≠‡∏ô Logout
        if self.app_instance:
            try:
                print("‚è≥ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å stop_timer()...")
                if hasattr(self.app_instance, "stop_timer"):  # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ stop_timer() ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô app_instance ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    self.app_instance.stop_timer()
                    print("‚úÖ stop_timer() ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                else:
                    print("‚ö†Ô∏è stop_timer() ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô app_instance")
                    messagebox.showerror("Error", "stop_timer() ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô app_instance")
                    self.logout_called = False
                    return
            except Exception as e:
                print(f"‚ùå stop_timer() ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: {e}")
                messagebox.showerror("Error", f"stop_timer() ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: {e}")
                self.logout_called = False
                return

        try:
            # ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ Logout ‡∏Ç‡∏≠‡∏á Microsoft
            logout_url = "https://login.microsoftonline.com/common/oauth2/v2.0/logout"
            print(f"üåê ‡πÄ‡∏õ‡∏¥‡∏î URL: {logout_url}")
            webbrowser.open(logout_url)

            # ‡πÅ‡∏™‡∏î‡∏á Messagebox ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤ Logout ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            messagebox.showinfo("Logout", "You have been logged out.")
            print("‚úÖ Messagebox ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

            # ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏¥‡∏î Login ‡πÉ‡∏´‡∏°‡πà
            self.master.after(500, self.close_app)

        except Exception as e:
            messagebox.showerror("Error", f"An error occurred during logout: {e}")
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            self.logout_called = False  # Reset ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î


    def close_app(self):
        """ ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î Login ‡πÉ‡∏´‡∏°‡πà """
        print("üö™ close_app() ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏•‡πâ‡∏ß!")
        if self.master.winfo_exists():
            print("üõë ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å")
            self.master.quit()
            self.master.destroy()

        print("üîÑ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å open_login()")
        self.open_login()


    def open_login(self):
        """‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Login ‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ LoginApp"""
        import sys
        import os

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå Login.py ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        login_py_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "Login.py"))
        if not os.path.exists(login_py_path):
            messagebox.showerror("Error", "Cannot find Login.py")
            return

        try:
            print(f"‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î Login.py ‡∏ó‡∏µ‡πà‡∏û‡∏≤‡∏ò: {login_py_path}")
            python_executable = sys.executable  # ‡πÉ‡∏ä‡πâ Python interpreter ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
            subprocess.Popen([python_executable, login_py_path], shell=True)  # ‡πÉ‡∏ä‡πâ shell=True ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô

            print("üõë ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏´‡∏•‡∏±‡∏Å‡∏î‡πâ‡∏ß‡∏¢ sys.exit()")
            sys.exit()  # ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏õ‡πÄ‡∏•‡∏¢

        except Exception as e:
            messagebox.showerror("Error", f"Failed to open Login: {e}")


if __name__ == "__main__":
    root = tk.Tk()  
    root.title("Profile Frame")

    frame = ProfileFrame(root, user_email="test@example.com")
    frame.pack(fill="both", expand=True)

    root.mainloop()
