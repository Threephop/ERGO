import os
import tkinter as tk
from tkinter import ttk
from azure.storage.blob import BlobServiceClient
from video_player import play_video  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡πà‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏≤‡∏ò‡πÄ‡∏ï‡πá‡∏°
video_folder = os.path.join(os.path.dirname(__file__), "video")
updated_videos_folder = os.path.join(video_folder, "updated_videos")
print(f"üõ†Ô∏è Full path to video folder: {os.path.abspath(video_folder)}")
print(f"üõ†Ô∏è Full path to updated_videos folder: {os.path.abspath(updated_videos_folder)}")

# üîπ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Azure
AZURE_CONNECTION_STRING = "Connection string here"
CONTAINER_NAME = "ergodefault"

blob_service_client = BlobServiceClient.from_connection_string(AZURE_CONNECTION_STRING)
container_client = blob_service_client.get_container_client(CONTAINER_NAME)

blobs = [blob.name for blob in container_client.list_blobs()]
print("üìú Files in Azure Blob Storage:", blobs)

# üîπ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
DEFAULT_VIDEO_DIR = os.path.join(os.path.dirname(__file__), "video", "default_videos")
UPDATED_VIDEO_DIR = os.path.join(os.path.dirname(__file__), "video", "updated_videos")

class HomeFrame(tk.Frame):
    def __init__(self, parent):
        super().__init__(parent)
        self.parent = parent
        self.init_ui()

    def init_ui(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á UI"""
        self.pack(fill=tk.BOTH, expand=True)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
        self.update_button = tk.Button(self, text="üîÑ Update Videos", command=self.update_videos)
        self.update_button.pack(pady=5)

        # Combobox ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
        self.video_list = ttk.Combobox(self, state="readonly")
        self.video_list.pack(pady=5)
        self.load_video_list()

        # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
        self.play_button = tk.Button(self, text="‚ñ∂Ô∏è Play Video", command=self.play_selected_video)
        self.play_button.pack(pady=5)

    def download_videos(self):
        """‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏≤‡∏Å Azure"""
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å (`video`) ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        video_folder = os.path.join(os.path.dirname(__file__), "video")
        if not os.path.exists(video_folder):
            os.makedirs(video_folder)
            print(f"üìÇ Created folder: {video_folder}")

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå `updated_videos` ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        update_videos_folder = os.path.join(video_folder, "updated_videos")
        if not os.path.exists(update_videos_folder):
            os.makedirs(update_videos_folder)
            print(f"üìÇ Created folder: {update_videos_folder}")

        blob_service_client = BlobServiceClient.from_connection_string(AZURE_CONNECTION_STRING)
        container_client = blob_service_client.get_container_client(CONTAINER_NAME)

        blobs = [blob.name for blob in container_client.list_blobs()]

        for blob_name in blobs:
            # ‡πÉ‡∏ä‡πâ os.path.join ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏≤‡∏ò‡πÑ‡∏ü‡∏•‡πå
            local_file_path = os.path.join(update_videos_folder, os.path.basename(blob_name))
            print(f"üìå Trying to download: {blob_name} ‚Üí {local_file_path}")

            if not os.path.exists(local_file_path):  
                try:
                    with open(local_file_path, "wb") as file:
                        download_stream = container_client.download_blob(blob_name)
                        file.write(download_stream.readall())

                    print(f"‚úÖ Downloaded: {blob_name}")
                except Exception as e:
                    print(f"‚ùå Failed to download {blob_name}: {e}")
            else:
                print(f"‚úÖ Already exists: {blob_name}")
                
    def load_video_list(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô local"""
        videos = []

        for folder in [DEFAULT_VIDEO_DIR, UPDATED_VIDEO_DIR]:
            if os.path.exists(folder):
                videos.extend([f for f in os.listdir(folder) if f.endswith((".mp4", ".avi"))])

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Combobox ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏û‡∏≤‡∏ò‡πÄ‡∏ï‡πá‡∏°
        self.video_list["values"] = videos
        if videos:
            self.video_list.current(0)  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
        print(f"üìú Loaded videos: {videos}")

    def play_selected_video(self):
        """‡πÄ‡∏•‡πà‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
        selected_video = self.video_list.get()
        if not selected_video:
            return

        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        video_path = os.path.join(DEFAULT_VIDEO_DIR, selected_video)
        if not os.path.exists(video_path):
            video_path = os.path.join(UPDATED_VIDEO_DIR, selected_video)

        if os.path.exists(video_path):
            play_video(video_path)
        else:
            print(f"‚ùå Error: Video file not found - {selected_video}")

    def update_videos(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏≤‡∏Å Azure"""
        self.download_videos()
        self.load_video_list()  # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        print("‚úÖ Videos updated!")

# üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
if __name__ == "__main__":
    root = tk.Tk()
    root.title("üé¨ Video Player with Azure Update")
    root.geometry("400x250")  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
    app = HomeFrame(root)
    root.mainloop()