import tkinter as tk
from tkinter import messagebox
from matplotlib import pyplot as plt
from home_frame import HomeFrame
from community_frame import CommunityFrame
from dashboard_frame import DashboardFrame
from leaderboard_frame import LeaderboardFrame
from setting_frame import SettingFrame
from PDPA_frame import PopupFrame
from profile_frame import ProfileFrame
from decimal import Decimal
from PIL import Image, ImageTk
import win32gui
import win32con
import time
import os
import requests
import sys
import threading
import subprocess
import io
import psutil
import pystray
from PIL import Image, ImageDraw
import win32api
import win32event
import win32process
import winerror
import ctypes
from ctypes import wintypes

def change_windows_taskbar_icon(window, icon_windows_path):
    try:
        window.iconbitmap(icon_windows_path)  # ‡πÉ‡∏ä‡πâ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    except Exception as e:
        print(f"Error changing icon: {e}")
        
params = {
    "x_api_key": "ergoapipoC18112024",  # ‡∏™‡πà‡∏á API Key ‡πÉ‡∏ô query parameter
}

class App(tk.Tk):
    def __init__(self, user_email):
        super().__init__()
        self.running = True
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö Windows Taskbar
        self.protocol("WM_TAKE_FOCUS", self.on_taskbar_click)
        self.after(100, self.register_taskbar_restart)

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        self.icon_dir = os.path.join(os.path.dirname(__file__), "icon")
        self.icon_windows_path = os.path.join(self.icon_dir, "windows_icon.ico")
        change_windows_taskbar_icon(self, self.icon_windows_path)
        self.change_taskbar_icon()
        self.title("ERGO PROJECT")
        self.user_email = user_email
        self.user_id = None  # ‡πÄ‡∏Å‡πá‡∏ö user_id
        self.profile_image_url = None  # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô AttributeError
    
        self.user_id = self.fetch_user_id(user_email)  # ‡∏î‡∏∂‡∏á user_id ‡∏à‡∏≤‡∏Å API
        
        self.icon_dir = os.path.join(os.path.dirname(__file__), "icon")
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
        self.default_profile_path = os.path.join(self.icon_dir, "profile.png")
        self.iconbitmap(os.path.join(self.icon_dir, "GODJI-Action_200113_0008.ico"))  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏ò‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå .ico
        self.geometry("1024x768")  # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
        self.configure(bg="white")  # ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
        window_width = 1024
        window_height = 768
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        position_top = int(screen_height / 2 - window_height / 2)
        position_right = int(screen_width / 2 - window_width / 2)
        self.geometry(f"{window_width}x{window_height}+{position_right}+{position_top}")
        self.start_time = None
        self.app_time = Decimal("0.00")
        
        self.start_timer()  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ
        # ‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö event ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ
        self.protocol("WM_DELETE_WINDOW", self.on_closing)

        # response = requests.get("https://ergoapicontainer.kindfield-b150dbf6.southeastasia.azurecontainerapps.io/users")
        # if response.status_code == 200:
        #     data = response.json()
        #     self.username = data['users'][3]
        
    
        # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ users ‡∏à‡∏≤‡∏Å API
        try:
            response = requests.get("https://ergoapicontainer.kindfield-b150dbf6.southeastasia.azurecontainerapps.io/users", params=params, timeout=5)
            response.raise_for_status()  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö HTTP Status Code

            data = response.json()

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ 'users' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô list
            users_list = data.get('users', [])
            if isinstance(users_list, list):
                # üîπ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user ‡∏ï‡∏≤‡∏° email
                user_data = next((user for user in users_list if user.get("email") == self.user_email), None)
                self.username = user_data.get("username", "Unknown User") if user_data else "Unknown User"
            else:
                print("‚ö†Ô∏è Error: 'users' is not a list!")
                self.username = "Unknown User"

        except (requests.RequestException, ValueError) as e:
            print(f"‚ö†Ô∏è API Error: {e}")
            self.username = "Unknown User"
            self.show_popup()  # ‡πÅ‡∏™‡∏î‡∏á Popup ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠

        self.show_popup()
        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏≤
        self.selected_language = "English"
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á SettingFrame ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô callback ‡πÑ‡∏õ
        self.setting_frame = SettingFrame(self, self.get_is_muted, self.on_language_change)
        self.setting_frame.place(x=0, y=0, width=800, height=400)

        self.translations = {
            "English": {
                "home": "Home",
                "community": "Community",
                "dashboard": "Dashboard",
                "leaderboard": "Leaderboard",
            },
            "‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢": {
                "home": "‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å",
                "community": "‡∏ä‡∏∏‡∏°‡∏ä‡∏ô",
                "dashboard": "‡πÅ‡∏ú‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°",
                "leaderboard": "‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö",
            },
        }
        
        self.frames = {}
        self.current_frame = None
        
        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Sidebar ‡∏Å‡πà‡∏≠‡∏ô (‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ)
        self.sidebar = tk.Frame(self, bg="#221551", width=200, height=768)
        self.sidebar.pack(side="left", fill="y")

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° Profile ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
        self.profile_button = tk.Button(
            self.sidebar,
            bg="#221551",
            fg="white",
            relief="flat",
            activebackground="#6F6969",
            activeforeground="white",
            command=lambda: self.show_frame(ProfileFrame),
        )
        self.profile_button.place(x=55, y=10)  # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏∏‡πà‡∏°

        # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å API ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß
        self.update_sidebar_profile()

        self.frames = {}
        self.current_frame = None

        # Username Display with Profile Picture
        self.username_frame = tk.Frame(self.sidebar, bg="#221551", height=200)
        self.username_frame.place(x=0, y=0, width=200)  # ‡πÉ‡∏ä‡πâ place ‡πÅ‡∏ó‡∏ô pack

        # Label ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "MENU" ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏•‡πá‡∏Å
        self.menu_label = tk.Label(self.sidebar, text="M\nE\nN\nU", bg="#221551", fg="white", font=("Arial", 20))
        self.menu_label.place(x=20, y=220)

        # ‡∏ã‡πà‡∏≠‡∏ô label "MENU" ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°
        self.menu_label.place_forget()

        # Binding the window resize event to a function
        self.bind("<Configure>", self.on_resize)
        
        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
        def wrap_text(text, width):
            words = text.split(" ")
            lines = []
            current_line = ""

            for word in words:
                if len(current_line) + len(word) + 1 <= width:
                    current_line += " " + word if current_line else word
                else:
                    lines.append(current_line)
                    current_line = word

            if current_line:
                lines.append(current_line)

            return "\n".join(lines)

        wrapped_username = wrap_text(self.username, 15)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Username ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥
        tk.Label(self.username_frame, text=wrapped_username, font=("PTT 45 Pride", 14), fg="white", bg="#221551", wraplength=180, justify="center").place(x=10, y=150)


        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° Home
        home_icon_path = os.path.join(self.icon_dir, "home_icon.png")
        home_icon = tk.PhotoImage(file=home_icon_path)

        self.home_button = tk.Button(
            self.sidebar,
            image=home_icon,
            text=self.translations[self.selected_language]["home"],
            compound="left",  # ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            bg="#221551",
            fg="white",
            font=("PTT 45 Pride", 12),
            relief="flat",
            activebackground="#6F6969",
            activeforeground="white",
            command=lambda: self.show_frame(HomeFrame),
        )
        self.home_button.image = home_icon
        self.home_button.place(x=30, y=250)  # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏∏‡πà‡∏° Home

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° Community
        community_icon_path = os.path.join(self.icon_dir, "community_icon.png")
        community_icon = tk.PhotoImage(file=community_icon_path)

        self.community_button = tk.Button(
            self.sidebar,
            image=community_icon,
            text=self.translations[self.selected_language]["community"],
            compound="left",
            bg="#221551",
            fg="white",
            font=("PTT 45 Pride", 12),
            relief="flat",
            activebackground="#6F6969",
            activeforeground="white",
            command=lambda: self.show_frame(CommunityFrame),
        )
        self.community_button.image = community_icon
        self.community_button.place(x=30, y=350)  # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏∏‡πà‡∏° Community

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° Dashboard
        dashboard_icon_path = os.path.join(self.icon_dir, "Dashboard_icon.png")
        dashboard_icon = tk.PhotoImage(file=dashboard_icon_path)

        self.dashboard_button = tk.Button(
            self.sidebar,
            image=dashboard_icon,
            text=self.translations[self.selected_language]["dashboard"],
            compound="left",
            bg="#221551",
            fg="white",
            font=("PTT 45 Pride", 12),
            relief="flat",
            activebackground="#6F6969",
            activeforeground="white",
            command=lambda: self.show_frame(DashboardFrame),
        )
        self.dashboard_button.image = dashboard_icon
        self.dashboard_button.place(x=30, y=450)  # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏∏‡πà‡∏° Dashboard

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° Leaderboard
        leaderboard_icon_path = os.path.join(self.icon_dir, "Leaderboard_icon.png")
        leaderboard_icon = tk.PhotoImage(file=leaderboard_icon_path)

        self.leaderboard_button = tk.Button(
            self.sidebar,
            image=leaderboard_icon,
            text=self.translations[self.selected_language]["leaderboard"],
            compound="left",
            bg="#221551",
            fg="white",
            font=("PTT 45 Pride", 12),
            relief="flat",
            activebackground="#6F6969",
            activeforeground="white",
            command=lambda: self.show_frame(LeaderboardFrame),
        )
        self.leaderboard_button.image = leaderboard_icon
        self.leaderboard_button.place(x=30, y=550)  # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏∏‡πà‡∏° Leaderboard

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° Setting
        setting_icon_path = os.path.join(self.icon_dir, "Settings_icon 1.png")
        setting_icon = tk.PhotoImage(file=setting_icon_path)

        self.setting_button = tk.Button(
            self.sidebar,
            image=setting_icon,
            compound="left",  # ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            bg="#221551",
            fg="white",
            font=("PTT 45 Pride", 12),
            relief="flat",
            activebackground="#6F6969",
            activeforeground="white",
            command=lambda: self.show_frame(SettingFrame),
        )
        self.setting_button.image = setting_icon
        self.setting_button.place(x=50, y=650)  # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏∏‡πà‡∏° Setting

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° speaker
        self.is_muted = False

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° speaker
        self.speaker_icon_path = os.path.join(self.icon_dir, "Speaker.png")
        self.mute_icon_path = os.path.join(self.icon_dir, "mute.png")

        self.speaker_icon = tk.PhotoImage(file=self.speaker_icon_path)
        self.mute_icon = tk.PhotoImage(file=self.mute_icon_path)

        # ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° speaker ‡∏ã‡πâ‡∏≥
        # ‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡πâ‡∏ß
        self.speaker_button = tk.Button(
            self.sidebar,
            image=self.speaker_icon,
            compound="left",  # ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            bg="#221551",
            fg="white",
            font=("Arial", 12),
            relief="flat",
            activebackground="#6F6969",
            activeforeground="white",
            command=self.toggle_mute,  # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô toggle_mute
        )
        self.speaker_button.image = self.speaker_icon
        self.speaker_button.place(x=104, y=641)  # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏∏‡πà‡∏° speaker


        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° Profile ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
        self.profile_button = tk.Button(
            self.sidebar,
            bg="#221551",
            fg="white",
            relief="flat",
            activebackground="#6F6969",
            activeforeground="white",
            command=lambda: self.show_frame(ProfileFrame),
        )
        self.profile_button.place(x=60, y=10)  # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏∏‡πà‡∏°

        # ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å API ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß
        self.update_sidebar_profile()
        self.show_frame(HomeFrame)
    
    def fetch_profile_image(self):
        """ ‡∏î‡∏∂‡∏á URL ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å API ‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà self.profile_image_url """
        def fetch():
            api_url = f"https://ergoapicontainer.kindfield-b150dbf6.southeastasia.azurecontainerapps.io/get_profile_url/{self.user_id}"
            try:
                response = requests.get(api_url, params=params, timeout=5)
                if response.status_code == 200:
                    self.profile_image_url = response.json().get("profile_url", "")
                    print(f"‚úÖ Profile image URL updated: {self.profile_image_url}")
                    self.after(2000, self.update_sidebar_profile)  # ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ API ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ
                else:
                    print("‚ö†Ô∏è API returned error for profile image")
                    self.profile_image_url = None
            except requests.RequestException as e:
                print(f"‚ö†Ô∏è Error fetching profile image: {e}")
                self.profile_image_url = None

        threading.Thread(target=fetch, daemon=True).start()

    def fetch_user_id(self, email):
        url = f"https://ergoapicontainer.kindfield-b150dbf6.southeastasia.azurecontainerapps.io/get_user_id/{email}"
        try:
            response = requests.get(url, params=params, timeout=5)
            if response.status_code == 200:
                data = response.json()
                return data.get("user_id")  # ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ user_id ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            else:
                return None
        except requests.RequestException as e:
            print(f"‚ö†Ô∏è Error fetching user_id: {e}")
            return None
    
    def update_sidebar_profile(self):
        """‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà Sidebar"""
        try:
            # ‚úÖ 1. ‡∏î‡∏∂‡∏á URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å API
            response = requests.get("https://ergoapicontainer.kindfield-b150dbf6.southeastasia.azurecontainerapps.io/get_profile_image/", params={"user_id": self.user_id, "x_api_key": "ergoapipoC18112024"})
            profile_url = response.json().get("profile_url") if response.status_code == 200 else None

            # ‚úÖ 2. ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å URL (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            if profile_url:
                try:
                    image_response = requests.get(profile_url, params=params, timeout=5)
                    if image_response.status_code == 200:
                        image_data = io.BytesIO(image_response.content)
                        profile_image = Image.open(image_data)
                    else:
                        raise ValueError("Failed to fetch image from URL")
                except Exception as e:
                    print(f"‚ö†Ô∏è Error loading profile image from URL: {e}")
                    profile_image = Image.open(self.default_profile_path)  # üîπ ‡πÉ‡∏ä‡πâ Default
            else:
                profile_image = Image.open(self.default_profile_path)  # üîπ ‡πÉ‡∏ä‡πâ Default ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ URL

            # ‚úÖ 3. ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            profile_image = profile_image.resize((100, 100), Image.Resampling.LANCZOS)
            profile_icon = ImageTk.PhotoImage(profile_image)

            # ‚úÖ 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏∏‡πà‡∏° Sidebar
            self.profile_button.config(image=profile_icon)
            self.profile_button.image = profile_icon  # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏≠‡πÄ‡∏£‡∏ô‡∏ã‡πå‡∏´‡∏≤‡∏¢
            print("‚úÖ Sidebar profile updated successfully!")

        except Exception as e:
            print(f"‚ùå update_sidebar_profile() error: {e}")



    def on_profile_picture_updated(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ"""
        print("‚úÖ Profile picture updated, refreshing sidebar...")

        # üîπ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API refresh_profile ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        try:
            api_url = f"https://ergoapicontainer.kindfield-b150dbf6.southeastasia.azurecontainerapps.io/refresh_profile/{self.user_id}"
            response = requests.get(api_url, params=params, timeout=5)
            response.raise_for_status()
            data = response.json()

            # üîπ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Username ‡πÅ‡∏•‡∏∞ Profile Image URL
            self.username = data.get("username", "Unknown User")
            self.profile_image_url = data.get("profile_url")

            # üîπ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô Sidebar
            self.update_sidebar_profile()

        except requests.RequestException as e:
            print(f"‚ö†Ô∏è Failed to refresh profile: {e}")
        
    def change_taskbar_icon(self):
        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô Taskbar ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ win32gui
        icon_path = os.path.join(self.icon_dir, "GODJI-Action_200113_0008.ico")
        hwnd = win32gui.GetForegroundWindow()
        win32gui.SendMessage(hwnd, win32con.WM_SETICON, win32con.ICON_SMALL, icon_path)

    def toggle_mute(self):
        """‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°"""
        self.is_muted = not self.is_muted  # ‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞

        if self.is_muted:
            self.speaker_button.config(image=self.mute_icon)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô mute
        else:
            self.speaker_button.config(image=self.speaker_icon)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô speaker

    def load_sidebar_profile_image(self):
        """ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å URL ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Sidebar """
        profile_icon = None  # üîπ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Default ‡∏Å‡πà‡∏≠‡∏ô
        profile_url = self.fetch_profile_image()  # ‡∏î‡∏∂‡∏á URL ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å API
        
        if profile_url:
            try:
                response = requests.get(profile_url, params=params, timeout=5)  # ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å URL
                if response.status_code == 200:
                    image_data = io.BytesIO(response.content)
                    image = Image.open(image_data)
                    image = image.resize((100, 100), Image.Resampling.LANCZOS)
                    profile_icon = ImageTk.PhotoImage(image)  
                else:
                    raise ValueError("Failed to fetch image from URL")
            except Exception as e:
                print(f"‚ö†Ô∏è Error loading profile image from URL: {e}")

        # üîπ ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å URL ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Default `profile.png`
        if profile_icon is None:
            profile_icon = ImageTk.PhotoImage(Image.open(os.path.join(self.icon_dir, "profile.png")).resize((100, 100)))

        if hasattr(self, 'profile_button'):
            self.profile_button.config(image=profile_icon)
            self.profile_button.image = profile_icon
        else:
            self.profile_button = tk.Button(
                self.sidebar,
                image=profile_icon,
                compound="left",
                bg="#221551",
                fg="white",
                font=("Arial", 12),
                relief="flat",
                activebackground="#6F6969",
                activeforeground="white",
                command=lambda: self.show_frame(ProfileFrame),
            )
            self.profile_button.image = profile_icon
            self.profile_button.place(x=60, y=10)


    def show_frame(self, frame_class): 
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏ü‡∏£‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        if self.current_frame and isinstance(self.current_frame, frame_class):
            return  # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡πÄ‡∏î‡∏¥‡∏°

        # ‡∏ã‡πà‡∏≠‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        if self.current_frame:
            self.current_frame.pack_forget()  # ‡πÉ‡∏ä‡πâ pack_forget ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ã‡πà‡∏≠‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡πÄ‡∏î‡∏¥‡∏°

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ü‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        if frame_class not in self.frames:
            if frame_class == SettingFrame:
                self.frames[frame_class] = frame_class(self, self.get_is_muted, self.on_language_change)

            elif frame_class == DashboardFrame:
                self.frames[frame_class] = frame_class(self, self.user_email)  # ‡∏™‡πà‡∏á email ‡πÑ‡∏õ‡πÉ‡∏´‡πâ DashboardFrame
            
            elif frame_class == CommunityFrame:
                self.frames[frame_class] = frame_class(self, self.user_email)

            elif frame_class == ProfileFrame:
                self.frames[frame_class] = frame_class(self, self.user_email, app_instance=self)  # ‡∏™‡πà‡∏á email ‡πÑ‡∏õ‡πÉ‡∏´‡πâ ProfileFrame   
                 
            elif frame_class == LeaderboardFrame:
                self.frames[frame_class] = frame_class(self, self.user_email)
                
            else:
                self.frames[frame_class] = frame_class(self)

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ü‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        self.current_frame = self.frames[frame_class]

        # ‡∏ß‡∏≤‡∏á‡πÄ‡∏ü‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà
        self.current_frame.pack(fill=tk.BOTH, expand=True)  # fill=tk.BOTH ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏ü‡∏£‡∏°‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á


    def get_is_muted(self):
        """‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ is_muted"""
        return self.is_muted

    def on_language_change(self, language):
        print(f"Language changed to: {language}")
        self.selected_language = language
        self.update_language(language)
    
    def show_popup(self):
        PopupFrame(self) 

        
    def update_language(self, language):
        self.selected_language = language
        self.home_button.config(text=self.translations[self.selected_language]["home"])
        self.community_button.config(text=self.translations[self.selected_language]["community"])
        self.dashboard_button.config(text=self.translations[self.selected_language]["dashboard"])
        self.leaderboard_button.config(text=self.translations[self.selected_language]["leaderboard"])
        
    def on_resize(self, event):
        # ‡πÉ‡∏ä‡πâ self.winfo_width() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
        if self.winfo_width() < 700:
            # ‡∏¢‡πà‡∏≠ sidebar ‡πÉ‡∏ô‡πÅ‡∏Å‡∏ô x
            self.sidebar.config(width=60)  # ‡∏¢‡πà‡∏≠ sidebar ‡πÉ‡∏´‡πâ‡πÅ‡∏Ñ‡∏ö‡∏•‡∏á
            self.menu_label.place(x=20, y=220)  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "MENU"
            
            # ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π
            self.username_frame.place_forget()
            self.profile_button.place_forget()
            self.home_button.place_forget()
            self.community_button.place_forget()
            self.dashboard_button.place_forget()
            self.leaderboard_button.place_forget()
            self.setting_button.place_forget()
            self.speaker_button.place_forget()
            
        else:
            # ‡∏Ç‡∏¢‡∏≤‡∏¢ sidebar ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏î‡∏¥‡∏°
            self.sidebar.config(width=200)
            self.menu_label.place_forget()  # ‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "MENU"
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π
            self.profile_button.place(x=50, y=20)
            self.username_frame.place(x=25, y=0, width=200) 
            self.home_button.place(x=30, y=250)
            self.community_button.place(x=30, y=350)
            self.dashboard_button.place(x=30, y=450)
            self.leaderboard_button.place(x=30, y=550)
            self.setting_button.place(x=50, y=650)
            self.speaker_button.place(x=104, y=641)

    def start_timer(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ"""
        self.start_time = time.time()
        print("Started app timer.")

    def stop_timer(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"""
        if self.start_time is not None:
            elapsed_time = time.time() - self.start_time
            self.app_time = Decimal(f"{elapsed_time:.2f}")
            self.send_app_time()
            self.send_app_time_month()
            print(f"App closed. Total usage time: {self.app_time} seconds")
        else:
            print("Timer was not started.")
            
    def send_app_time(self):
        """‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏≠‡∏õ‡πÑ‡∏õ‡∏¢‡∏±‡∏á API"""
        api_url = "https://ergoapicontainer.kindfield-b150dbf6.southeastasia.azurecontainerapps.io/update_app_time/"
        params = {
            "email": self.user_email,
            "app_time": float(self.app_time),  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float 
            "x_api_key": "ergoapipoC18112024"
        }
        
        try:
            response = requests.get(api_url, params=params)
            if response.status_code == 200:
                print("‚úÖ App time updated successfully:", response.json())
            else:
                print("‚ùå Failed to update app time:", response.json())
        except Exception as e:
            print(f"‚ùå Error sending data: {e}")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏° Task ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á
        self.bg_thread = threading.Thread(target=self.background_task, daemon=True)
        self.bg_thread.start()
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á System Tray Icon 
        self.create_tray_icon()

        if self.is_already_running():
            print("‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!")
            sys.exit(1)

    def send_app_time_month(self):
        """‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏≠‡∏õ‡πÑ‡∏õ‡∏¢‡∏±‡∏á API"""
        api_url = "https://ergoapicontainer.kindfield-b150dbf6.southeastasia.azurecontainerapps.io/update_app_time_month/"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô endpoint
        params = {
            "email": self.user_email,
            "app_time": float(self.app_time),  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
            "x_api_key": "ergoapipoC18112024"
        }
        try:
            response = requests.get(api_url, params=params)
            if response.status_code == 200:
                print("‚úÖ App time updated successfully:", response.json())
            else:
                print("‚ùå Failed to update app time:", response.json())
        except Exception as e:
            print(f"‚ùå Error sending data: {e}")

        # ‡πÄ‡∏£‡∏¥‡πà‡∏° Task ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á
        self.bg_thread = threading.Thread(target=self.background_task, daemon=True)
        self.bg_thread.start()

    def on_closing(self):
        """‡∏ã‡πà‡∏≠‡∏ô UI ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ Background Task ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠"""
        self.running = True  # ‡∏¢‡∏±‡∏á‡πÉ‡∏´‡πâ Background Task ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠
        self.withdraw()  # ‡∏ã‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ã‡πà‡∏≠‡∏ô
        elapsed_time = time.time() - self.start_time
        self.app_time = Decimal(f"{elapsed_time:.2f}")
        self.send_app_time()
        
        # restart timer ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏ö‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
        self.start_time = time.time()
        
        self.create_tray_icon()  # ‡∏™‡∏£‡πâ‡∏≤‡∏á System Tray Icon ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        print("App is running in the background...")
        return "break"  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡πÇ‡∏î‡∏¢‡∏™‡∏¥‡πâ‡∏ô‡πÄ‡∏ä‡∏¥‡∏á

    def background_task(self):
        """‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÅ‡∏°‡πâ UI ‡∏ñ‡∏π‡∏Å‡∏ã‡πà‡∏≠‡∏ô"""
        while self.running:
            print("Background task running...")
            time.sleep(10) # ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ CPU ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÅ‡∏™‡πÄ‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        print("Background task stopped.")

    def create_tray_icon(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÉ‡∏ô System Tray ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå ICO"""
        if hasattr(self, 'tray_icon'):
            return  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ tray_icon ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà

        icon_path = os.path.join(self.icon_dir, "windows_icon.ico")
        if not os.path.exists(icon_path):
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ó‡∏µ‡πà '{icon_path}'")
            icon_path = os.path.join(self.icon_dir, "GODJI-Action_200113_0008.ico")  # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô
            if not os.path.exists(icon_path):
                return

        icon_image = Image.open(icon_path)

        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
        def on_left_click(icon, item):
            self.show_window()

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏°‡∏ô‡∏π Tray
        menu = pystray.Menu(
            pystray.MenuItem("Show", self.show_window),
            pystray.MenuItem("Exit", self.exit_app)
        )

        self.tray_icon = pystray.Icon("ergo_project", icon_image, "ERGO PROJECT", menu)
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å (‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏î‡∏±‡∏ö‡πÄ‡∏ö‡∏¥‡∏•‡∏Ñ‡∏•‡∏¥‡∏Å)
        self.tray_icon.on_activate = on_left_click
        
        # ‡∏£‡∏±‡∏ô Tray Icon ‡πÉ‡∏ô Thread ‡πÅ‡∏¢‡∏Å
        self.tray_thread = threading.Thread(target=self.tray_icon.run, daemon=True)
        self.tray_thread.start()


    def show_window(self, icon=None, item=None):
        """‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤"""
        self.deiconify()  # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
        self.lift()  # ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        self.focus_force()  # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö focus
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á
        if self.start_time is not None:
            elapsed_time = time.time() - self.start_time
            self.app_time += Decimal(f"{elapsed_time:.2f}")
            
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà
        self.start_time = time.time()

    def exit_app(self):
        """‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á Background Task"""
        print("üõë Exiting application...")

        # ‡∏´‡∏¢‡∏∏‡∏î Background Task
        self.running = False  

        # ‡∏õ‡∏¥‡∏î System Tray Icon ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if hasattr(self, 'tray_icon'):
            self.tray_icon.stop()

        # ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏à‡∏≤‡∏Å main thread
        self.after(100, self.destroy)  

        # ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        self.after(200, sys.exit, 0)  # ‡πÉ‡∏´‡πâ Tkinter ‡∏õ‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°

    def is_already_running(self):
        """‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏ó‡∏ô"""
        current_pid = os.getpid()
        current_exe = sys.executable
        
        for process in psutil.process_iter(['pid', 'name', 'exe']):
            try:
                if (process.info['name'] == os.path.basename(current_exe) or 
                    process.info['exe'] == current_exe) and process.info['pid'] != current_pid:
                    
                    print(f"üîç Found running instance: PID {process.info['pid']}")
                    if self.focus_existing_window(process.info['pid']):
                        return True  # ‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏•‡πâ‡∏ß
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                pass
        return False

    def focus_existing_window(self, pid):
        """‡∏´‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á"""
        def callback(hwnd, hwnds):
            _, found_pid = win32process.GetWindowThreadProcessId(hwnd)
            if found_pid == pid and win32gui.IsWindowVisible(hwnd):
                win32gui.ShowWindow(hwnd, win32con.SW_RESTORE)  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Minimized
                win32gui.SetForegroundWindow(hwnd)  # ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤
                hwnds.append(hwnd)
            return True
        
        hwnds = []
        win32gui.EnumWindows(callback, hwnds)

        if hwnds:
            print("‚úÖ Found existing window and brought it to foreground")
            return True
        else:
            print("‚ö†Ô∏è No existing window found")
            return False

    def register_taskbar_restart(self):
        """‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô taskbar handler ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏à‡∏≤‡∏Å Taskbar"""
        try:
            self.hwnd = self.winfo_id()

            # ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô SetWindowSubclass ‡∏à‡∏≤‡∏Å comctl32.dll
            comctl32 = ctypes.WinDLL("comctl32")
            SetWindowSubclass = comctl32.SetWindowSubclass
            SetWindowSubclass.argtypes = [wintypes.HWND, wintypes.LPVOID, wintypes.UINT_PTR, wintypes.DWORD]
            SetWindowSubclass.restype = wintypes.BOOL

            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î callback ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö WNDPROC
            self.WNDPROC = ctypes.WINFUNCTYPE(wintypes.LRESULT, wintypes.HWND, wintypes.UINT, wintypes.WPARAM, wintypes.LPARAM)(self.wnd_proc)
            
            # ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô subclass
            if not SetWindowSubclass(self.hwnd, self.WNDPROC, 0, 0):
                raise ctypes.WinError()
            
            print("‚úÖ Taskbar restart handler registered successfully")
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô taskbar handler: {e}")

    def wnd_proc(self, hwnd, msg, wparam, lparam):
        """Windows callback handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Taskbar"""
        if msg == win32con.WM_ACTIVATEAPP and wparam:
            self.after(100, self.show_window)

        # ‡πÉ‡∏ä‡πâ DefWindowProc() ‡πÅ‡∏ó‡∏ô CallWindowProc()
        return ctypes.windll.user32.DefWindowProcW(hwnd, msg, wparam, lparam)
    
    def on_taskbar_click(self, event=None):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÉ‡∏ô Taskbar"""
        if not self.winfo_viewable():  # ‡∏ñ‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ã‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà
            self.show_window()
        return "break"
def open_login():
    """ ‡πÄ‡∏õ‡∏¥‡∏î Login.exe ‡∏´‡∏£‡∏∑‡∏≠ Login.py ‡πÉ‡∏´‡∏°‡πà """
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏±‡∏ô‡∏à‡∏≤‡∏Å .exe ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if getattr(sys, 'frozen', False):  # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô .exe
            base_dir = sys._MEIPASS  # PyInstaller ‡πÅ‡∏ï‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
        else:
            base_dir = os.path.dirname(os.path.abspath(__file__))  # ‡∏ñ‡πâ‡∏≤‡∏£‡∏±‡∏ô‡∏à‡∏≤‡∏Å .py

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏≤‡∏ò‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏á Login.py ‡πÅ‡∏•‡∏∞ Login.exe
        login_py_path = os.path.join(base_dir, "Login.py")
        login_exe_path = os.path.join(base_dir, "Login.exe")

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Login.exe ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if os.path.exists(login_exe_path):
            subprocess.Popen([login_exe_path], shell=True)  # ‡πÄ‡∏õ‡∏¥‡∏î Login.exe
        elif os.path.exists(login_py_path):
            subprocess.Popen([sys.executable, login_py_path], shell=True)  # ‡πÄ‡∏õ‡∏¥‡∏î Login.py
        else:
            messagebox.showerror("Error", f"Cannot find Login.py or Login.exe at {base_dir}")
            return

        print("‚úÖ Login ‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
        
        quit()  # ‡∏õ‡∏¥‡∏î Tkinter mainloop
        after(500, lambda: sys.exit(0))  # ‡∏£‡∏≠ 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
    except Exception as e:
        messagebox.showerror("Error", f"Failed to restart Login: {e}")



if __name__ == "__main__":
    # ‡πÉ‡∏ä‡πâ Mutex ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏ã‡πâ‡∏≥
    mutex_name = "ERGO_PROJECT_MUTEX"
    mutex = win32event.CreateMutex(None, 1, mutex_name)
    last_error = win32api.GetLastError()

    app_instance = App("dummy@email.com")  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏ô‡∏™‡πÅ‡∏ï‡∏ô‡∏ã‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö

    if last_error == winerror.ERROR_ALREADY_EXISTS or app_instance.is_already_running():
        print("‚ö†Ô∏è ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ó‡∏ô")
        sys.exit(0)

    if len(sys.argv) > 1:
        user_email = sys.argv[1]  # ‚úÖ ‡∏î‡∏∂‡∏á email ‡∏à‡∏≤‡∏Å arguments
        app = App(user_email)
        app.mainloop()
    else:
        open_login()
        print("Error: No user email provided.")